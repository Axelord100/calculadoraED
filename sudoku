public class Sudoku {
    private int[][] sudoku;
    private static final int VACIO = 0;
      
    public Sudoku(){
        sudoku = new int[9][9];
    }
      
    public Sudoku(int sudoku[][]) {
        this.sudoku= sudoku;
    }
    
    public boolean contieneEnRenglon(int ren, int n){
        ConjADT<Integer> conj = new ConjuntoA();
        for(int i = 0; i<9; i++)
            conj.agregaElemento(sudoku[ren][i]);
        return conj.contiene(n);
    }
    
    public boolean contieneEnColumna(int col, int n){
        ConjADT<Integer> conj = new ConjuntoA();
        for(int i = 0; i<9; i++)
            conj.agregaElemento(sudoku[i][col]);
        return conj.contiene(n);
    }
    
    public boolean contieneEnCuadrado(int ren, int col, int n){
        ConjADT<Integer> conj = new ConjuntoA();
        int colInic = col - col%3;
        int renInic = ren - ren%3;
        for(int i=renInic;i<renInic+3;i++)
            for(int j=colInic;j<colInic+3;j++)
                conj.agregaElemento(sudoku[i][j]);
        return conj.contiene(n);            
    }
    
    public boolean esValorPosible(int ren, int col, int n){
        return !(contieneEnRenglon(ren,n)||contieneEnColumna(col,n)||contieneEnCuadrado(ren,col,n));
    }
    
    public boolean resuelve(){
        return resuelve(0,0);
    }
    
    private boolean resuelve(int ren, int col){
        
        if(col == 9){
            col = 0;
            ren++;
        if(ren==9)
            return true;
        }
        if(sudoku[ren][col] != VACIO)
            return resuelve(ren,col+1);
        
        for(int n = 1; n<=9;n++){
            if(esValorPosible(ren,col,n)){
                sudoku[ren][col]=n;
                if(resuelve(ren,col+1))
                    return true;
                sudoku[ren][col] = VACIO;
            }
               
        }
        return false;
      
    }
    
   
    
    public void displaySudoku()   // esta funcion solo es para probar la funcionalidad, no va en el proyecto final 
    {
        for(int i=0;i<9;i++)
        {
            if(i%3==0 && i!=0)
            {
                System.out.println("----------------------------------\n");
            }
            for(int j=0;j<9;j++)
            {
                if(j%3==0 && j!=0)
                {
                    System.out.print(" | ");
                }
                System.out.print(" " + sudoku[i][j] + " ");

            }

            System.out.println();
        }
        System.out.println("\n\n__________________________________________\n\n");
    }
    
    
    
    
    public static void main(String[] args) {
        
        int[][] a = new int[9][9];
        a[0][0] = 6;
        a[0][1] = 0;
        a[0][2] = 0;
        a[0][3] = 0;
        a[0][4] = 0;
        a[0][5] = 0;
        a[0][6] = 0;
        a[0][7] = 0;
        a[0][8] = 2;
        a[1][0] = 8;
        a[1][1] = 0;
        a[1][2] = 1;
        a[1][3] = 0;
        a[1][4] = 0;
        a[1][5] = 0;
        a[1][6] = 0;
        a[1][7] = 0;
        a[1][8] = 0;
        a[2][0] = 0;
        a[2][1] = 7;
        a[2][2] = 5;
        a[2][3] = 0;
        a[2][4] = 8;
        a[2][5] = 4;
        a[2][6] = 0;
        a[2][7] = 0;
        a[2][8] = 0;
        a[3][0] = 4;
        a[3][1] = 3;
        a[3][2] = 0;
        a[3][3] = 0;
        a[3][4] = 2;
        a[3][5] = 0;
        a[3][6] = 5;
        a[3][7] = 6;
        a[3][8] = 1;
        a[4][0] = 5;
        a[4][1] = 1;
        a[4][2] = 8;
        a[4][3] = 7;
        a[4][4] = 0;
        a[4][5] = 0;
        a[4][6] = 4;
        a[4][7] = 0;
        a[4][8] = 9;
        a[5][0] = 0;
        a[5][1] = 9;
        a[5][2] = 6;
        a[5][3] = 4;
        a[5][4] = 1;
        a[5][5] = 0;
        a[5][6] = 3;
        a[5][7] = 0;
        a[5][8] = 0;
        a[6][0] = 0;
        a[6][1] = 0;
        a[6][2] = 0;
        a[6][3] = 0;
        a[6][4] = 7;
        a[6][5] = 0;
        a[6][6] = 0;
        a[6][7] = 0;
        a[6][8] = 0;
        a[7][0] = 0;
        a[7][1] = 6;
        a[7][2] = 0;
        a[7][3] = 0;
        a[7][4] = 3;
        a[7][5] = 1;
        a[7][6] = 0;
        a[7][7] = 5;
        a[7][8] = 0;
        a[8][0] = 7;
        a[8][1] = 0;
        a[8][2] = 2;
        a[8][3] = 5;
        a[8][4] = 4;
        a[8][5] = 0;
        a[8][6] = 6;
        a[8][7] = 0;
        a[8][8] = 3;
        
        Sudoku s = new Sudoku(a);
        s.displaySudoku();
        System.out.println(s.resuelve());
        s.displaySudoku();
        
        
    }
