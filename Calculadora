package calculadora;

import poo.ExceptionVacia;
import poo.PilaA;

public class Calculadora {

    public static boolean checaOper(String cadena) {
        PilaA<Character>pila = new PilaA();
        boolean resp = true;
        int i = 0;
        int k = 0;
        
        while(i < cadena.length() - 1 && resp) {
            char point = cadena.charAt(i);
            char point1 = cadena.charAt(i + 1);
            
            try {                
                switch(point) {
                    case ('+'):
                        if(i == 0) 
                            resp = false;
                        
                        if(point1 == '*' || point1 == '/' || point1 == '-')
                            resp = false;
                        break;
                    case ('-'):
                        if(point1 == '*' || point1 == '/' || point1 == '-')
                            resp = false;
                        break;
                    case ('/'):
                        if(i == 0)
                            resp = false;
                        
                        if(point1 == '/' || point1 == '*' || point1 == '-' || point1 == '0')
                            resp = false;
                        
                        //case if operation == 0
                        break;
                    case ('*'): 
                        if(i == 0)
                            resp = false;
                        
                        if(point1 == '/' || point1 == '*' || point == '-')
                            resp = false;
                        break;
                    case ('.'):
                        int j = i + 1;
                        while(j < cadena.length() - 1 && point1 != '+' && point1 != '-' && point1 != '*' && point1 != '/' && point1 != '(' && point1 != ')' && resp) {
                            if(point == cadena.charAt(j))
                                resp = false;

                            j++;
                        }
                        break;
                    case ('('):
                        k++;
                        break;
                    case (')'):
                        k--;
                        break;
                        
                }
                
            }catch(Exception e) {
                System.exit(0);
            }              
            i++;
        }
        
        return resp && pila.isEmpty(); 
    }    
    
    public static int jerarquia(char ch){
        switch (ch) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
        }
        return -1;
    }
   
    public static String fijoAPosfijo(String cad){
        String res = "";
        PilaA<Character> pila = new PilaA<>();
        char c;
         
        for (int i = 0; i < cad.length(); i++) {
            c = cad.charAt(i);
            if (Character.isLetterOrDigit(c) || c=='.')
                res += c;
            else{
                if(res.length()>=1)
                    if(res.charAt(res.length() - 1) != ' '){
                        res+=" ";  
                    }
                if (c == '(')
                    pila.push(c);
                else{
                    if (c == ')'){
                        while (!pila.isEmpty() && pila.peek() != '(')
                            res += pila.pop()+" ";
                        if (!pila.isEmpty() && pila.peek() == '(')
                            pila.pop();
                    }
                    else {
                        while (!pila.isEmpty() && jerarquia(c) <= jerarquia(pila.peek()))
                            res +=pila.pop()+" ";
                        pila.push(c);
                    }
                }
            }
        }
        res+=" ";
        while (!pila.isEmpty()){
            res +=pila.pop()+" ";
        }
        return res;
    }
    public static PilaA stringAPila(String cadena){
        String[] aux;
        PilaA pila;
        int i;
        pila = new PilaA();
        aux = cadena.split(" ");
        for(i = aux.length - 1;i >= 0;i--){
            switch(aux[i]){
                case "-":
                    pila.push('-');
                    break;
                case "+":
                    pila.push('+');
                    break;
                case "*":
                    pila.push('*');
                    break;
                case "/":
                    pila.push('/');
                    break;
                default :
                    pila.push(Double.parseDouble(aux[i]));
            }
        }
        return pila;
    }
    
    public static double evaluaExpresion(PilaA expresion){
        double resp, aux1, aux2;
        char oper;
        PilaA pila = new PilaA();
        resp = 0;
        while(!expresion.isEmpty()){
            if(expresion.peek() instanceof Double)
                pila.push(expresion.pop());
            else {
                aux1 = (double) pila.pop();
                aux2 = (double) pila.pop();
                oper = (char) expresion.pop();
                switch(oper){
                    case '+':
                        resp = aux2 + aux1;
                        break;
                    case '-':
                        resp = aux2 - aux1;
                        break;
                    case '*':
                        resp = aux2 * aux1;
                        break;
                    case '/':
                        resp = aux2 / aux1;    
                }
                pila.push(resp);
            }
        }
        return resp;
    }
    
    public static boolean analizaParentesis(String cadena) {
        PilaA<Character> pila = new PilaA();
        boolean resp=false;
        
        for(int i=0; i<cadena.length(); i++) {
            if(cadena.charAt(i)=='(') {
                pila.push(cadena.charAt(i));
            }
            else if(cadena.charAt(i)==')') {
                if(pila.isEmpty()) {
                    return false;
                }
                else {
                    pila.pop();
                }
            }
            if(pila.isEmpty()) {
                resp=true;
            }
        }
        return resp;
    } 
            
}
